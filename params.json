{"name":"iRaccoonShow","tagline":"a tool to improve your presentations","body":"# iRaccoonShow\r\n\r\niRaccoonShow enables the creation of presentations that include slides with synchronized sound. One presentation (re)created with iRaccoonShow is <http://www.free-culture.tk>.\r\n\r\nOf course, your favourite screencast software can be used to record a presentation. But such a video cannot beat the presentations generated by iRaccoonShow in two levels:\r\n\r\n* File size: each slide image is embedded only once in the final presetation.\r\n\r\n* Image quality: vector images allow higher resolutions without higher file size.\r\n\r\nVideo needs a fixed rate of frames per second. In digital video, the rate seems to be 25 frames per second. In a presention, even with a lower frame rate, this is a huge waste of bits. And also the lower number of frames per second there are in a presentation video, the higher probability of unsynchronized audio you may experience.\r\n\r\nBut even when using digital video with variable frame rate (where the slide takes in a single frame as long as it is needed), everyting in standard video is bitmap. Which means: images drawn with points. Such images have a given resolution, which cannot increased without noticing the points. And the higher the video resolution, the larger size the resulting video.\r\n\r\nVector images are by definition resolution--independent. They can be increased as much as desired. And file size of the presentation remains the same.\r\n\r\n## Tools\r\n\r\nThere are two main tools in iRaccoonShow:\r\n\r\n* `iraccoonshow` generates the final Flash presentation and loader from the PDF file, the sound recording and the time transitions.\r\n\r\n* `recslides` records the sound to a file and writes the slide transitions to a text file, while displaying the slides at full screen.\r\n\r\n## Warning\r\n\r\nJust in case you wonder and before further reading: I cannot code. My background isn’t technical and I have never learned programming. Sorry, but I must confess it’s too complex for a simple mind such as mine :smirk:.\r\n\r\nWhat I have done here is could be considered trial–and–error writing. It works for me, but it is full of glitches. I’m aware of the limits of iRacconShow, but I cannot overcome them.\r\n\r\n## Requirements\r\n\r\niRaccoonShow has the following dependencies:\r\n\r\n* Python: was the original script language of RaccoonShow, from what everything evolved.\r\n* PyGTK, PyGlade: GUI.\r\n* Poppler: PDF display.\r\n* GStreamer, PyGST: audio recording.\r\n* SWFTools: generation of Flash files.\r\n\r\nIt is mainly a command–line software. In `recslides`, command–line is only used to invoke the tool (after that,  it’s a pure GUI program).\r\n\r\nIt only works on Linux. I’m not saying that it cannot be ported to other platforms: this is something still to be done.\r\n\r\n## How It Works\r\n\r\n### `recslides`\r\n\r\n`recslides` records the sound from the microphone and registers each slide transition timing.\r\n\r\n1. It’s invoked in the command--line with something like `recslides mypresentation.pdf`.\r\n\r\n1. A new window is opened, displaying the first slide from presentation.\r\n\r\n1. When the space bar is pressed for the first time, presentation goes to full screen and sound from microphone starts to be recorded into a sound file.\r\n\r\n1. Each time the space bar is pressed, presentation advances to next slide and the transition time is recorded to a text file.\r\n\r\n1. When the last slide is reached and the space bar is pressed, presentation leaves full screen and audio recording is stopped.\r\n\r\nWith `recslides`, you obtain both the recorded sound and transition times from each slide in presentation. This means you have two key features:\r\n\r\n* Having the transition times and sound, you can generate the final presentation in the format you like (being Flash only one of the possible ones [more on this]).\r\n\r\n* This is the best (or the only possible) way to get accurate transition times. Times are recorded when giving the presentation (not necessarily in public), not recreated by calculating how long each slide took.\r\n\r\n<!--- this is so simple stupid that it just works -->\r\n\r\n### `ìraccoonshow`\r\n\r\n`ìraccoonshow` should be cleared before it can be released to the public ([read the issue](https://github.com/ousia/iRaccoonShow/issues/1)).\r\n\r\n## Help Wanted\r\n\r\nCopy and paste is the wrong technique to write anything. This also applies to code writing.\r\n\r\nEven before I can start sharing code, I already have [issues](https://github.com/ousia/iRaccoonShow/issues). If you are interested, any help is highly appreciated.\r\n\r\nUnless I have assigned an issue to myself, you are welcome to take\r\n\r\n## Compatibility issues\r\n\r\n### `iraccoonshow`\r\n\r\nAlthough Python the other\r\n\r\n### Output\r\nFlash\r\n\r\n## License\r\n\r\nAll code published within this repository is released to the public under the GNU General Public License version 3 or any later version.\r\n\r\nThe code comes with no warranty. Use at your own risk.\r\n\r\n## Acknowledgments\r\n\r\nWell, I gratefully acknowledge that I stand on the shoulders of many giants:\r\n\r\n* Lawrence Lessig gave the original talk at the O’Reilly Open Source Conference in 2002.\r\n\r\n* Leonard Lin created the first Flash presentation and posted it [online](http://randomfoo.net/oscon/2002/lessig/). (Originally released under a Creative Commons Attribution-ShareAlike license.)\r\n\r\n* Matthias Kramm develops [SWFTools](http://swftools.org/), a GNU GPL software that makes all the Flash generation.\r\n\r\n* Jono Bacon developed [RaccoonShow](http://www.jonobacon.org/files/raccoonshow-0.6.tgz), the first tool that enabled the recreation from a Flash file  from PDF slides and recorded video. (Released under the GNU GPLv2 license. Abandoned project.)\r\n\r\n* Sergio Costas developed [SuperShow](http://www.rastersoft.com/programas/supershow.html), which allows the user to recreate a presentation from a video file and the slides in PDF format. (Released under the GNU GPLv3 license. Abandoned project.)\r\n\r\n* I recreated the original presentation and posted it [online](http://www.free-culture.tk). Thanks to the improvements to SWFTools by Matthias Kramm, the original file was decreased in a 27% smaller size. I couldn’t have done that without the help of Matthias Kramm, Sergio Costas, Chris Pugh, Ricardo Pedroso and Huub Schaeks.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}